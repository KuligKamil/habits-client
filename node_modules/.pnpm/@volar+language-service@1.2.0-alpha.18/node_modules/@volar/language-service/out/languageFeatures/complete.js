var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.register = void 0;
const transformer = require("../transformer");
const vscode = require("vscode-languageserver-protocol");
const definePlugin_1 = require("../utils/definePlugin");
function register(context) {
    let cache;
    return (uri, position, completionContext) => __awaiter(this, void 0, void 0, function* () {
        var _a, _b, _c, _d, _e;
        let document;
        if ((completionContext === null || completionContext === void 0 ? void 0 : completionContext.triggerKind) === vscode.CompletionTriggerKind.TriggerForIncompleteCompletions
            && (cache === null || cache === void 0 ? void 0 : cache.uri) === uri) {
            for (const cacheData of cache.data) {
                if (!cacheData.list.isIncomplete)
                    continue;
                if (cacheData.map) {
                    for (const [_, map] of context.documents.getMapsByVirtualFileUri(cacheData.map.embeddedDocumentUri)) {
                        for (const mapped of map.toGeneratedPositions(position, data => !!data.completion)) {
                            if (!((_a = cacheData.plugin.complete) === null || _a === void 0 ? void 0 : _a.on))
                                continue;
                            const embeddedCompletionList = yield cacheData.plugin.complete.on(map.virtualFileDocument, mapped, completionContext);
                            if (!embeddedCompletionList) {
                                cacheData.list.isIncomplete = false;
                                continue;
                            }
                            cacheData.list = transformer.asCompletionList(embeddedCompletionList, range => map.toSourceRange(range), map.virtualFileDocument, (newItem, oldItem) => newItem.data = {
                                uri,
                                original: {
                                    additionalTextEdits: oldItem.additionalTextEdits,
                                    textEdit: oldItem.textEdit,
                                    data: oldItem.data,
                                },
                                pluginId: Object.keys(context.plugins).find(key => context.plugins[key] === cacheData.plugin),
                                map: {
                                    embeddedDocumentUri: map.virtualFileDocument.uri,
                                },
                            });
                        }
                    }
                }
                else if (document = context.getTextDocument(uri)) {
                    if (!((_b = cacheData.plugin.complete) === null || _b === void 0 ? void 0 : _b.on))
                        continue;
                    const completionList = yield cacheData.plugin.complete.on(document, position, completionContext);
                    if (!completionList) {
                        cacheData.list.isIncomplete = false;
                        continue;
                    }
                    completionList.items.forEach(item => {
                        item.data = {
                            uri,
                            original: {
                                additionalTextEdits: item.additionalTextEdits,
                                textEdit: item.textEdit,
                                data: item.data,
                            },
                            pluginId: Object.keys(context.plugins).find(key => context.plugins[key] === cacheData.plugin),
                            map: undefined,
                        };
                    });
                }
            }
        }
        else {
            const rootFile = (_c = context.documents.getSourceByUri(uri)) === null || _c === void 0 ? void 0 : _c.root;
            cache = {
                uri,
                data: [],
                mainCompletion: undefined,
            };
            // monky fix https://github.com/johnsoncodehk/volar/issues/1358
            let isFirstMapping = true;
            if (rootFile) {
                yield (0, definePlugin_1.visitEmbedded)(context.documents, rootFile, (_, map) => __awaiter(this, void 0, void 0, function* () {
                    var _f, _g;
                    const plugins = Object.values(context.plugins).sort(sortPlugins);
                    let _data;
                    for (const mapped of map.toGeneratedPositions(position, data => {
                        _data = data;
                        return !!data.completion;
                    })) {
                        for (const plugin of plugins) {
                            if (!((_f = plugin.complete) === null || _f === void 0 ? void 0 : _f.on))
                                continue;
                            if (plugin.complete.isAdditional && !isFirstMapping)
                                continue;
                            if ((completionContext === null || completionContext === void 0 ? void 0 : completionContext.triggerCharacter) && !((_g = plugin.complete.triggerCharacters) === null || _g === void 0 ? void 0 : _g.includes(completionContext.triggerCharacter)))
                                continue;
                            const isAdditional = _data && typeof _data.completion === 'object' && _data.completion.additional || plugin.complete.isAdditional;
                            if (cache.mainCompletion && (!isAdditional || (cache === null || cache === void 0 ? void 0 : cache.mainCompletion.documentUri) !== map.virtualFileDocument.uri))
                                continue;
                            // avoid duplicate items with .vue and .vue.html
                            if (plugin.complete.isAdditional && (cache === null || cache === void 0 ? void 0 : cache.data.some(data => data.plugin === plugin)))
                                continue;
                            const embeddedCompletionList = yield plugin.complete.on(map.virtualFileDocument, mapped, completionContext);
                            if (!embeddedCompletionList || !embeddedCompletionList.items.length)
                                continue;
                            if (typeof (_data === null || _data === void 0 ? void 0 : _data.completion) === 'object' && _data.completion.autoImportOnly) {
                                embeddedCompletionList.items = embeddedCompletionList.items.filter(item => !!item.labelDetails);
                            }
                            if (!isAdditional) {
                                cache.mainCompletion = { documentUri: map.virtualFileDocument.uri };
                            }
                            const completionList = transformer.asCompletionList(embeddedCompletionList, range => map.toSourceRange(range), map.virtualFileDocument, (newItem, oldItem) => newItem.data = {
                                uri,
                                original: {
                                    additionalTextEdits: oldItem.additionalTextEdits,
                                    textEdit: oldItem.textEdit,
                                    data: oldItem.data,
                                },
                                pluginId: Object.keys(context.plugins).find(key => context.plugins[key] === plugin),
                                map: {
                                    embeddedDocumentUri: map.virtualFileDocument.uri,
                                }
                            });
                            cache.data.push({
                                map: {
                                    embeddedDocumentUri: map.virtualFileDocument.uri,
                                },
                                plugin,
                                list: completionList,
                            });
                        }
                        isFirstMapping = false;
                    }
                    return true;
                }));
            }
            if (document = context.getTextDocument(uri)) {
                const plugins = Object.values(context.plugins).sort(sortPlugins);
                for (const plugin of plugins) {
                    if (!((_d = plugin.complete) === null || _d === void 0 ? void 0 : _d.on))
                        continue;
                    if (plugin.complete.isAdditional && !isFirstMapping)
                        continue;
                    if ((completionContext === null || completionContext === void 0 ? void 0 : completionContext.triggerCharacter) && !((_e = plugin.complete.triggerCharacters) === null || _e === void 0 ? void 0 : _e.includes(completionContext.triggerCharacter)))
                        continue;
                    if (cache.mainCompletion && (!plugin.complete.isAdditional || cache.mainCompletion.documentUri !== document.uri))
                        continue;
                    // avoid duplicate items with .vue and .vue.html
                    if (plugin.complete.isAdditional && (cache === null || cache === void 0 ? void 0 : cache.data.some(data => data.plugin === plugin)))
                        continue;
                    const completionList = yield plugin.complete.on(document, position, completionContext);
                    if (!completionList || !completionList.items.length)
                        continue;
                    if (!plugin.complete.isAdditional) {
                        cache.mainCompletion = { documentUri: document.uri };
                    }
                    completionList.items.forEach(item => {
                        item.data = {
                            uri,
                            original: {
                                additionalTextEdits: item.additionalTextEdits,
                                textEdit: item.textEdit,
                                data: item.data,
                            },
                            pluginId: Object.keys(context.plugins).find(key => context.plugins[key] === plugin),
                            map: undefined,
                        };
                    });
                    cache.data.push({
                        map: undefined,
                        plugin,
                        list: completionList,
                    });
                }
            }
        }
        return combineCompletionList(cache.data.map(cacheData => cacheData.list));
        function sortPlugins(a, b) {
            var _a, _b;
            return (((_a = b.complete) === null || _a === void 0 ? void 0 : _a.isAdditional) ? -1 : 1) - (((_b = a.complete) === null || _b === void 0 ? void 0 : _b.isAdditional) ? -1 : 1);
        }
        function combineCompletionList(lists) {
            var _a;
            return {
                isIncomplete: lists.some(list => list.isIncomplete),
                itemDefaults: (_a = lists.find(list => list.itemDefaults)) === null || _a === void 0 ? void 0 : _a.itemDefaults,
                items: lists.map(list => list.items).flat(),
            };
        }
    });
}
exports.register = register;
//# sourceMappingURL=complete.js.map