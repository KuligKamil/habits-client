var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.register = void 0;
const shared = require("@volar/shared");
const featureWorkers_1 = require("../utils/featureWorkers");
const vscode = require("vscode-languageserver-protocol");
function register(context) {
    return (uri) => __awaiter(this, void 0, void 0, function* () {
        var _a, _b, _c;
        const referencesCodeLendsEnabled = (_b = yield ((_a = context.env.configurationHost) === null || _a === void 0 ? void 0 : _a.getConfiguration('volar.codeLens.references'))) !== null && _b !== void 0 ? _b : true;
        return (_c = yield (0, featureWorkers_1.languageFeatureWorker)(context, uri, undefined, (arg) => [arg], (plugin, document) => __awaiter(this, void 0, void 0, function* () {
            var _d, _e, _f, _g;
            let codeLens = yield ((_e = (_d = plugin.codeLens) === null || _d === void 0 ? void 0 : _d.on) === null || _e === void 0 ? void 0 : _e.call(_d, document));
            const pluginId = Object.keys(context.plugins).find(key => context.plugins[key] === plugin);
            codeLens === null || codeLens === void 0 ? void 0 : codeLens.forEach(codeLens => {
                codeLens.data = {
                    kind: 'normal',
                    uri,
                    original: {
                        data: codeLens.data,
                    },
                    pluginId,
                };
            });
            if (referencesCodeLendsEnabled) {
                const referencesCodeLensLocs = yield ((_g = (_f = plugin.referencesCodeLens) === null || _f === void 0 ? void 0 : _f.on) === null || _g === void 0 ? void 0 : _g.call(_f, document));
                const referencesCodeLens = referencesCodeLensLocs === null || referencesCodeLensLocs === void 0 ? void 0 : referencesCodeLensLocs.map(loc => vscode.CodeLens.create(loc.range, {
                    kind: 'references',
                    uri,
                    location: loc,
                    pluginId,
                }));
                codeLens = [
                    ...codeLens !== null && codeLens !== void 0 ? codeLens : [],
                    ...referencesCodeLens !== null && referencesCodeLens !== void 0 ? referencesCodeLens : [],
                ];
            }
            return codeLens;
        }), (data, map) => data.map(codeLens => {
            if (!map)
                return codeLens;
            const range = map.toSourceRange(codeLens.range);
            if (range) {
                return Object.assign(Object.assign({}, codeLens), { range });
            }
        }).filter(shared.notEmpty), arr => arr.flat())) !== null && _c !== void 0 ? _c : [];
    });
}
exports.register = register;
//# sourceMappingURL=codeLens.js.map