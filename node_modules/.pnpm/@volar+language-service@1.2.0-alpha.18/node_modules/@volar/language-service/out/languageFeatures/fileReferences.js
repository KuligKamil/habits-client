var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.register = void 0;
const shared = require("@volar/shared");
const featureWorkers_1 = require("../utils/featureWorkers");
const dedupe = require("../utils/dedupe");
function register(context) {
    return (uri) => {
        return (0, featureWorkers_1.languageFeatureWorker)(context, uri, undefined, function* (_) {
            yield _;
        }, (plugin, document) => __awaiter(this, void 0, void 0, function* () {
            var _a, _b;
            return (_b = yield ((_a = plugin.findFileReferences) === null || _a === void 0 ? void 0 : _a.call(plugin, document))) !== null && _b !== void 0 ? _b : [];
        }), (data) => data.map(reference => {
            if (!context.documents.hasVirtualFileByUri(reference.uri)) {
                return reference;
            }
            for (const [_, map] of context.documents.getMapsByVirtualFileUri(reference.uri)) {
                const range = map.toSourceRange(reference.range);
                if (range) {
                    reference.uri = map.sourceFileDocument.uri;
                    reference.range = range;
                    return reference;
                }
            }
        }).filter(shared.notEmpty), arr => dedupe.withLocations(arr.flat()));
    };
}
exports.register = register;
//# sourceMappingURL=fileReferences.js.map