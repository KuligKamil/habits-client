var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.register = void 0;
const featureWorkers_1 = require("../utils/featureWorkers");
const dedupe = require("../utils/dedupe");
function register(context) {
    return (uri, position) => {
        return (0, featureWorkers_1.languageFeatureWorker)(context, uri, position, (position, map) => map.toGeneratedPositions(position, data => !!data.references), (plugin, document, position) => __awaiter(this, void 0, void 0, function* () {
            const recursiveChecker = dedupe.createLocationSet();
            const result = [];
            yield withMirrors(document, position);
            return result;
            function withMirrors(document, position) {
                var _a, _b;
                return __awaiter(this, void 0, void 0, function* () {
                    if (!plugin.findReferences)
                        return;
                    if (recursiveChecker.has({ uri: document.uri, range: { start: position, end: position } }))
                        return;
                    recursiveChecker.add({ uri: document.uri, range: { start: position, end: position } });
                    const references = (_a = yield plugin.findReferences(document, position)) !== null && _a !== void 0 ? _a : [];
                    for (const reference of references) {
                        let foundMirrorPosition = false;
                        recursiveChecker.add({ uri: reference.uri, range: { start: reference.range.start, end: reference.range.start } });
                        const mirrorMap = (_b = context.documents.getMirrorMapByUri(reference.uri)) === null || _b === void 0 ? void 0 : _b[1];
                        if (mirrorMap) {
                            for (const mapped of mirrorMap.findMirrorPositions(reference.range.start)) {
                                if (!mapped[1].references)
                                    continue;
                                if (recursiveChecker.has({ uri: mirrorMap.document.uri, range: { start: mapped[0], end: mapped[0] } }))
                                    continue;
                                foundMirrorPosition = true;
                                yield withMirrors(mirrorMap.document, mapped[0]);
                            }
                        }
                        if (!foundMirrorPosition) {
                            result.push(reference);
                        }
                    }
                });
            }
        }), (data) => {
            const results = [];
            for (const reference of data) {
                if (context.documents.hasVirtualFileByUri(reference.uri)) {
                    for (const [_, map] of context.documents.getMapsByVirtualFileUri(reference.uri)) {
                        const range = map.toSourceRange(reference.range, data => !!data.references);
                        if (range) {
                            results.push({
                                uri: map.sourceFileDocument.uri,
                                range,
                            });
                        }
                    }
                }
                else {
                    results.push(reference);
                }
            }
            return results;
        }, arr => dedupe.withLocations(arr.flat()));
    };
}
exports.register = register;
//# sourceMappingURL=references.js.map