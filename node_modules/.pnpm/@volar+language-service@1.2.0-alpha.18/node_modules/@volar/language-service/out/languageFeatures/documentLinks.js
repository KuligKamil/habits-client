var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.register = void 0;
const shared = require("@volar/shared");
const featureWorkers_1 = require("../utils/featureWorkers");
function register(context) {
    return (uri) => __awaiter(this, void 0, void 0, function* () {
        var _a;
        const pluginLinks = (_a = yield (0, featureWorkers_1.documentFeatureWorker)(context, uri, file => !!file.capabilities.documentSymbol, (plugin, document) => { var _a; return (_a = plugin.findDocumentLinks) === null || _a === void 0 ? void 0 : _a.call(plugin, document); }, (data, map) => data.map(link => {
            if (!map)
                return link;
            const range = map.toSourceRange(link.range);
            if (range) {
                return Object.assign(Object.assign({}, link), { range });
            }
        }).filter(shared.notEmpty), arr => arr.flat())) !== null && _a !== void 0 ? _a : [];
        const maps = context.documents.getMapsBySourceFileUri(uri);
        const fictitiousLinks = maps ? getFictitiousLinks(context.documents.getDocumentByUri(maps.snapshot, uri), maps.maps) : [];
        return [
            ...pluginLinks,
            ...fictitiousLinks,
        ];
        function getFictitiousLinks(document, maps) {
            const result = [];
            for (const [_, map] of maps) {
                for (const mapped of map.map.mappings) {
                    if (!mapped.data.displayWithLink)
                        continue;
                    if (mapped.sourceRange[0] === mapped.sourceRange[1])
                        continue;
                    result.push({
                        range: {
                            start: document.positionAt(mapped.sourceRange[0]),
                            end: document.positionAt(mapped.sourceRange[1]),
                        },
                        target: uri, // TODO
                    });
                }
            }
            return result;
        }
    });
}
exports.register = register;
//# sourceMappingURL=documentLinks.js.map