var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.register = void 0;
const shared = require("@volar/shared");
const transformer = require("../transformer");
const vscode = require("vscode-languageserver-protocol");
const common_1 = require("../utils/common");
const dedupe = require("../utils/dedupe");
const featureWorkers_1 = require("../utils/featureWorkers");
const rename_1 = require("./rename");
function register(context) {
    return (uri, range, codeActionContext) => __awaiter(this, void 0, void 0, function* () {
        var _a, _b, _c, _d, _e;
        const sourceDocument = context.getTextDocument(uri);
        if (!sourceDocument)
            return;
        const offsetRange = {
            start: sourceDocument.offsetAt(range.start),
            end: sourceDocument.offsetAt(range.end),
        };
        const pluginActions = yield (0, featureWorkers_1.languageFeatureWorker)(context, uri, { range, codeActionContext }, (_arg, map, file) => {
            var _a, _b;
            if (!file.capabilities.codeAction)
                return [];
            const _codeActionContext = {
                diagnostics: transformer.asLocations(codeActionContext.diagnostics, range => map.toGeneratedRange(range)),
                only: codeActionContext.only,
            };
            let minStart;
            let maxEnd;
            for (const mapping of map.map.mappings) {
                const overlapRange = (0, common_1.getOverlapRange)(offsetRange.start, offsetRange.end, mapping.sourceRange[0], mapping.sourceRange[1]);
                if (overlapRange) {
                    const start = (_a = map.map.toGeneratedOffset(overlapRange.start)) === null || _a === void 0 ? void 0 : _a[0];
                    const end = (_b = map.map.toGeneratedOffset(overlapRange.end)) === null || _b === void 0 ? void 0 : _b[0];
                    if (start !== undefined && end !== undefined) {
                        minStart = minStart === undefined ? start : Math.min(start, minStart);
                        maxEnd = maxEnd === undefined ? end : Math.max(end, maxEnd);
                    }
                }
            }
            if (minStart !== undefined && maxEnd !== undefined) {
                return [{
                        range: vscode.Range.create(map.virtualFileDocument.positionAt(minStart), map.virtualFileDocument.positionAt(maxEnd)),
                        codeActionContext: _codeActionContext,
                    }];
            }
            return [];
        }, (plugin, document, { range, codeActionContext }) => __awaiter(this, void 0, void 0, function* () {
            var _f, _g;
            const pluginId = Object.keys(context.plugins).find(key => context.plugins[key] === plugin);
            const diagnostics = codeActionContext.diagnostics.filter(diagnostic => {
                const data = diagnostic.data;
                if (data && data.version !== sourceDocument.version) {
                    // console.warn('[volar/plugin-api] diagnostic version mismatch', data.version, sourceDocument.version);
                    return false;
                }
                return (data === null || data === void 0 ? void 0 : data.type) === 'plugin' && (data === null || data === void 0 ? void 0 : data.pluginOrRuleId) === pluginId;
            }).map(diagnostic => {
                const data = diagnostic.data;
                return Object.assign(Object.assign({}, diagnostic), data.original);
            });
            const codeActions = yield ((_g = (_f = plugin.codeAction) === null || _f === void 0 ? void 0 : _f.on) === null || _g === void 0 ? void 0 : _g.call(_f, document, range, Object.assign(Object.assign({}, codeActionContext), { diagnostics })));
            codeActions === null || codeActions === void 0 ? void 0 : codeActions.forEach(codeAction => {
                codeAction.data = {
                    uri,
                    version: document.version,
                    type: 'plugin',
                    original: {
                        data: codeAction.data,
                        edit: codeAction.edit,
                    },
                    pluginId: Object.keys(context.plugins).find(key => context.plugins[key] === plugin),
                };
            });
            return codeActions;
        }), (_codeActions, sourceMap) => _codeActions.map(_codeAction => {
            if (!sourceMap)
                return _codeAction;
            if (_codeAction.edit) {
                const edit = (0, rename_1.embeddedEditToSourceEdit)(_codeAction.edit, context.documents, 'codeAction');
                if (edit) {
                    _codeAction.edit = edit;
                    return _codeAction;
                }
            }
            else {
                return _codeAction;
            }
        }).filter(shared.notEmpty), arr => dedupe.withCodeAction(arr.flat()));
        const ruleActions = [];
        for (const diagnostic of codeActionContext.diagnostics) {
            const data = diagnostic.data;
            if (data && data.version !== sourceDocument.version) {
                // console.warn('[volar/rules-api] diagnostic version mismatch', data.version, sourceDocument.version);
                continue;
            }
            if ((data === null || data === void 0 ? void 0 : data.type) === 'rule') {
                const fixes = (_c = (_b = (_a = context.ruleFixes) === null || _a === void 0 ? void 0 : _a[data.documentUri]) === null || _b === void 0 ? void 0 : _b[data.pluginOrRuleId]) === null || _c === void 0 ? void 0 : _c[data.ruleFixIndex];
                if (fixes) {
                    for (let i = 0; i < fixes[1].length; i++) {
                        const fix = fixes[1][i];
                        const matchKinds = [];
                        if (!codeActionContext.only) {
                            matchKinds.push(undefined);
                        }
                        else {
                            for (const kind of (_d = fix.kinds) !== null && _d !== void 0 ? _d : ['quickfix']) {
                                const matchOnly = matchOnlyKind(codeActionContext.only, kind);
                                if (matchOnly) {
                                    matchKinds.push(matchOnly);
                                }
                            }
                        }
                        for (const matchKind of matchKinds) {
                            const action = {
                                title: (_e = fix.title) !== null && _e !== void 0 ? _e : `Fix: ${diagnostic.message}`,
                                kind: matchKind,
                                diagnostics: [diagnostic],
                                data: {
                                    uri,
                                    type: 'rule',
                                    version: data.version,
                                    isFormat: data.isFormat,
                                    ruleId: data.pluginOrRuleId,
                                    documentUri: data.documentUri,
                                    ruleFixIndex: data.ruleFixIndex,
                                    index: i,
                                },
                            };
                            ruleActions.push(action);
                        }
                    }
                }
            }
        }
        return [
            ...pluginActions !== null && pluginActions !== void 0 ? pluginActions : [],
            ...ruleActions,
        ];
    });
}
exports.register = register;
function matchOnlyKind(only, kind) {
    const b = kind.split('.');
    for (const onlyKind of only) {
        const a = onlyKind.split('.');
        if (a.length <= b.length) {
            let matchNum = 0;
            for (let i = 0; i < a.length; i++) {
                if (a[i] == b[i]) {
                    matchNum++;
                }
            }
            if (matchNum === a.length) {
                return onlyKind;
            }
        }
    }
}
//# sourceMappingURL=codeActions.js.map