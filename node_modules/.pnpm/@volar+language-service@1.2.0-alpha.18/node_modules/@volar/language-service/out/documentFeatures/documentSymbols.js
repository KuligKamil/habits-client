var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.register = void 0;
const featureWorkers_1 = require("../utils/featureWorkers");
const transformer = require("../transformer");
const shared = require("@volar/shared");
const vscode = require("vscode-languageserver-protocol");
function register(context) {
    return (uri) => {
        return (0, featureWorkers_1.documentFeatureWorker)(context, uri, file => !!file.capabilities.documentSymbol, (plugin, document) => __awaiter(this, void 0, void 0, function* () {
            var _a;
            const symbols = yield ((_a = plugin.findDocumentSymbols) === null || _a === void 0 ? void 0 : _a.call(plugin, document));
            if (!(symbols === null || symbols === void 0 ? void 0 : symbols.length)) {
                return symbols;
            }
            if (vscode.DocumentSymbol.is(symbols[0])) {
                return symbols;
            }
            return symbols.map(symbol => {
                return vscode.DocumentSymbol.create(symbol.name, undefined, symbol.kind, symbol.location.range, symbol.location.range);
            });
        }), (data, map) => map
            ? data
                .map(symbol => transformer.asDocumentSymbol(symbol, range => map.toSourceRange(range)))
                .filter(shared.notEmpty)
            : data, arr => arr.flat());
    };
}
exports.register = register;
//# sourceMappingURL=documentSymbols.js.map