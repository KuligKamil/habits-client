import { LanguageServiceHost } from '@volar/language-core';
import { Config, LanguageServicePluginContext } from './types';
import type * as ts from 'typescript/lib/tsserverlibrary';
import type * as _ from 'vscode-languageserver-protocol';
export type LanguageService = ReturnType<typeof createLanguageService>;
export declare function createLanguageService(host: LanguageServiceHost, config: Config, env: LanguageServicePluginContext['env'], documentRegistry?: ts.DocumentRegistry): {
    triggerCharacters: string[];
    format: (uri: string, options: _.FormattingOptions, range?: _.Range | undefined, onTypeParams?: {
        ch: string;
        position: _.Position;
    } | undefined) => Promise<_.TextEdit[] | undefined>;
    getFoldingRanges: (uri: string) => Promise<_.FoldingRange[] | undefined>;
    getSelectionRanges: (uri: string, positions: _.Position[]) => Promise<_.SelectionRange[] | undefined>;
    findLinkedEditingRanges: (uri: string, position: _.Position) => Promise<_.LinkedEditingRanges | undefined>;
    findDocumentSymbols: (uri: string) => Promise<_.DocumentSymbol[] | undefined>;
    findDocumentColors: (uri: string) => Promise<_.ColorInformation[] | undefined>;
    getColorPresentations: (uri: string, color: _.Color, range: _.Range) => Promise<_.ColorPresentation[] | undefined>;
    doValidation: (uri: string, token?: _.CancellationToken | undefined, response?: ((result: _.Diagnostic[]) => void) | undefined) => Promise<_.Diagnostic[]>;
    findReferences: (uri: string, position: _.Position) => Promise<_.Location[] | undefined>;
    findFileReferences: (uri: string) => import("./types").NullableResult<_.Location[]>;
    findDefinition: (uri: string, position: _.Position) => Promise<_.LocationLink[] | undefined>;
    findTypeDefinition: (uri: string, position: _.Position) => Promise<_.LocationLink[] | undefined>;
    findImplementations: (uri: string, position: _.Position) => Promise<_.LocationLink[] | undefined>;
    prepareRename: (uri: string, position: _.Position) => Promise<NonNullable<_.Range | _.ResponseError<void> | null | undefined> | undefined>;
    doRename: (uri: string, position: _.Position, newName: string) => Promise<_.WorkspaceEdit | undefined>;
    getEditsForFileRename: (oldUri: string, newUri: string) => Promise<_.WorkspaceEdit | undefined>;
    getSemanticTokens: (uri: string, range: _.Range | undefined, legend: _.SemanticTokensLegend, cancelToken: _.CancellationToken, reportProgress?: ((tokens: import("./types").SemanticToken[]) => void) | undefined) => Promise<import("./types").SemanticToken[] | undefined> | undefined;
    doHover: (uri: string, position: _.Position) => Promise<_.Hover | undefined>;
    doComplete: (uri: string, position: _.Position, completionContext?: _.CompletionContext | undefined) => Promise<_.CompletionList>;
    doCodeActions: (uri: string, range: _.Range, codeActionContext: _.CodeActionContext) => Promise<_.CodeAction[] | undefined>;
    doCodeActionResolve: (item: _.CodeAction) => Promise<_.CodeAction>;
    doCompletionResolve: (item: _.CompletionItem) => Promise<_.CompletionItem>;
    getSignatureHelp: (uri: string, position: _.Position, signatureHelpContext?: _.SignatureHelpContext | undefined) => Promise<_.SignatureHelp | undefined>;
    doCodeLens: (uri: string) => Promise<_.CodeLens[]>;
    doCodeLensResolve: (item: _.CodeLens) => Promise<_.CodeLens>;
    findDocumentHighlights: (uri: string, position: _.Position) => Promise<_.DocumentHighlight[] | undefined>;
    findDocumentLinks: (uri: string) => Promise<_.DocumentLink[]>;
    findWorkspaceSymbols: (query: string) => Promise<_.WorkspaceSymbol[]>;
    doAutoInsert: (uri: string, position: _.Position, autoInsertContext: {
        lastChange: {
            range: _.Range;
            rangeOffset: number;
            rangeLength: number;
            text: string;
        };
    }) => Promise<NonNullable<string | _.TextEdit | null | undefined> | undefined>;
    getInlayHints: (uri: string, range: _.Range) => Promise<_.InlayHint[] | undefined>;
    callHierarchy: {
        doPrepare(uri: string, position: _.Position): Promise<_.CallHierarchyItem[] | undefined>;
        getIncomingCalls(item: _.CallHierarchyItem): Promise<_.CallHierarchyIncomingCall[]>;
        getOutgoingCalls(item: _.CallHierarchyItem): Promise<_.CallHierarchyOutgoingCall[]>;
    };
    dispose: () => void | undefined;
    context: LanguageServicePluginContext;
};
