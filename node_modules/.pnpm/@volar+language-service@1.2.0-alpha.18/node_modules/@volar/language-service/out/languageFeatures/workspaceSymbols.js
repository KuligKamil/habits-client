var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.register = void 0;
const transformer = require("../transformer");
const vscode = require("vscode-languageserver-protocol");
const shared = require("@volar/shared");
function register(context) {
    return (query) => __awaiter(this, void 0, void 0, function* () {
        const symbolsList = [];
        for (const plugin of Object.values(context.plugins)) {
            if (!plugin.findWorkspaceSymbols)
                continue;
            const embeddedSymbols = yield plugin.findWorkspaceSymbols(query);
            if (!embeddedSymbols)
                continue;
            const symbols = embeddedSymbols.map(symbol => transformer.asWorkspaceSymbol(symbol, loc => {
                if (context.documents.hasVirtualFileByUri(loc.uri)) {
                    for (const [_, map] of context.documents.getMapsByVirtualFileUri(loc.uri)) {
                        const range = map.toSourceRange(loc.range);
                        if (range) {
                            return vscode.Location.create(map.sourceFileDocument.uri, range);
                        }
                    }
                }
                else {
                    return loc;
                }
            })).filter(shared.notEmpty);
            symbolsList.push(symbols);
        }
        return symbolsList.flat();
    });
}
exports.register = register;
//# sourceMappingURL=workspaceSymbols.js.map