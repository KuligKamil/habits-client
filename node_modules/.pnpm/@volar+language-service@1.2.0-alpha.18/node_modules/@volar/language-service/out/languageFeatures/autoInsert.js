Object.defineProperty(exports, "__esModule", { value: true });
exports.register = void 0;
const featureWorkers_1 = require("../utils/featureWorkers");
function register(context) {
    return (uri, position, autoInsertContext) => {
        return (0, featureWorkers_1.languageFeatureWorker)(context, uri, { position, autoInsertContext }, function* (arg, map) {
            var _a;
            for (const position of map.toGeneratedPositions(arg.position, data => !!data.completion)) {
                const rangeOffset = (_a = map.map.toGeneratedOffset(arg.autoInsertContext.lastChange.rangeOffset)) === null || _a === void 0 ? void 0 : _a[0];
                const range = map.toGeneratedRange(arg.autoInsertContext.lastChange.range);
                if (rangeOffset !== undefined && range) {
                    yield {
                        position,
                        autoInsertContext: {
                            lastChange: Object.assign(Object.assign({}, arg.autoInsertContext.lastChange), { rangeOffset,
                                range }),
                        },
                    };
                    break;
                }
            }
        }, (plugin, document, arg) => { var _a; return (_a = plugin.doAutoInsert) === null || _a === void 0 ? void 0 : _a.call(plugin, document, arg.position, arg.autoInsertContext); }, (item, map) => {
            if (!map || typeof item === 'string')
                return item;
            const range = map.toSourceRange(item.range);
            if (range) {
                item.range = range;
                return item;
            }
        });
    };
}
exports.register = register;
//# sourceMappingURL=autoInsert.js.map