var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.register = void 0;
const rename_1 = require("./rename");
function register(context) {
    return (item) => __awaiter(this, void 0, void 0, function* () {
        var _a, _b, _c, _d, _e, _f, _g;
        const data = item.data;
        if ((data === null || data === void 0 ? void 0 : data.type) === 'plugin') {
            const plugin = context.plugins[data.pluginId];
            if (!((_a = plugin.codeAction) === null || _a === void 0 ? void 0 : _a.resolve))
                return item;
            Object.assign(item, data.original);
            item = yield plugin.codeAction.resolve(item);
            if (item.edit) {
                item.edit = (0, rename_1.embeddedEditToSourceEdit)(item.edit, context.documents, 'codeAction', { [data.uri]: data.version });
            }
        }
        if ((data === null || data === void 0 ? void 0 : data.type) === 'rule') {
            const fixes = (_d = (_c = (_b = context.ruleFixes) === null || _b === void 0 ? void 0 : _b[data.documentUri]) === null || _c === void 0 ? void 0 : _c[data.ruleId]) === null || _d === void 0 ? void 0 : _d[data.ruleFixIndex];
            const fix = fixes === null || fixes === void 0 ? void 0 : fixes[1][data.index];
            if (fix) {
                let edit = (_f = yield ((_e = fix.getWorkspaceEdit) === null || _e === void 0 ? void 0 : _e.call(fix, fixes[0]))) !== null && _f !== void 0 ? _f : undefined;
                if (!edit) {
                    const edits = yield ((_g = fix.getEdits) === null || _g === void 0 ? void 0 : _g.call(fix, fixes[0]));
                    if (edits) {
                        edit = {
                            documentChanges: [{
                                    textDocument: {
                                        uri: data.documentUri,
                                        version: null
                                    },
                                    edits,
                                }],
                        };
                    }
                }
                if (edit) {
                    item.edit = (0, rename_1.embeddedEditToSourceEdit)(edit, context.documents, data.isFormat ? 'format' : 'codeAction', { [data.uri]: data.version });
                }
            }
        }
        return item;
    });
}
exports.register = register;
//# sourceMappingURL=codeActionResolve.js.map