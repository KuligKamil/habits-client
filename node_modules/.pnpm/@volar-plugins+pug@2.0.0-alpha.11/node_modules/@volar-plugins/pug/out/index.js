var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
const pug = __importStar(require("./languageService"));
const html_1 = __importDefault(require("@volar-plugins/html"));
module.exports = () => (context) => {
    const pugDocuments = new WeakMap();
    const htmlPlugin = (0, html_1.default)()(context);
    const pugLs = pug.getLanguageService(htmlPlugin.getHtmlLs());
    return Object.assign(Object.assign({}, htmlPlugin), { getPugLs: () => pugLs, getPugDocument, rules: {
            onAny(context) {
                return __awaiter(this, void 0, void 0, function* () {
                    yield worker(context.document, (pugDocument) => {
                        if (pugDocument.ast) {
                            context.pug = {
                                rootNode: pugDocument.ast,
                                languageService: pugLs,
                            };
                        }
                    });
                    return context;
                });
            },
        }, complete: {
            on(document, position, _) {
                return worker(document, (pugDocument) => {
                    return pugLs.doComplete(pugDocument, position, context.env.documentContext);
                });
            },
        }, validation: {
            onSyntactic(document) {
                return worker(document, (pugDocument) => {
                    if (pugDocument.error) {
                        return [{
                                source: 'pug',
                                code: pugDocument.error.code,
                                message: pugDocument.error.msg,
                                range: {
                                    start: { line: pugDocument.error.line, character: pugDocument.error.column },
                                    end: { line: pugDocument.error.line, character: pugDocument.error.column },
                                },
                            }];
                    }
                    return [];
                });
            },
        }, doHover(document, position) {
            return worker(document, (pugDocument) => __awaiter(this, void 0, void 0, function* () {
                var _a;
                const hoverSettings = yield ((_a = context.env.configurationHost) === null || _a === void 0 ? void 0 : _a.getConfiguration('html.hover'));
                return pugLs.doHover(pugDocument, position, hoverSettings);
            }));
        },
        findDocumentHighlights(document, position) {
            return worker(document, (pugDocument) => {
                return pugLs.findDocumentHighlights(pugDocument, position);
            });
        },
        findDocumentLinks(document) {
            return worker(document, (pugDocument) => {
                if (context.env.documentContext) {
                    return pugLs.findDocumentLinks(pugDocument, context.env.documentContext);
                }
            });
        },
        findDocumentSymbols(document) {
            return worker(document, (pugDocument) => {
                return pugLs.findDocumentSymbols(pugDocument);
            });
        },
        getFoldingRanges(document) {
            return worker(document, (pugDocument) => {
                return pugLs.getFoldingRanges(pugDocument);
            });
        },
        getSelectionRanges(document, positions) {
            return worker(document, (pugDocument) => {
                return pugLs.getSelectionRanges(pugDocument, positions);
            });
        },
        doAutoInsert(document, position, insertContext) {
            return __awaiter(this, void 0, void 0, function* () {
                return worker(document, (pugDocument) => __awaiter(this, void 0, void 0, function* () {
                    var _a, _b, _c;
                    const lastCharacter = insertContext.lastChange.text[insertContext.lastChange.text.length - 1];
                    if (insertContext.lastChange.rangeLength === 0 && lastCharacter === '=') {
                        const enabled = (_b = (yield ((_a = context.env.configurationHost) === null || _a === void 0 ? void 0 : _a.getConfiguration('html.autoCreateQuotes')))) !== null && _b !== void 0 ? _b : true;
                        if (enabled) {
                            const text = pugLs.doQuoteComplete(pugDocument, position, yield ((_c = context.env.configurationHost) === null || _c === void 0 ? void 0 : _c.getConfiguration('html.completion')));
                            if (text) {
                                return text;
                            }
                        }
                    }
                }));
            });
        } });
    function worker(document, callback) {
        const pugDocument = getPugDocument(document);
        if (!pugDocument)
            return;
        return callback(pugDocument);
    }
    function getPugDocument(document) {
        if (document.languageId !== 'jade')
            return;
        const cache = pugDocuments.get(document);
        if (cache) {
            const [cacheVersion, cacheDoc] = cache;
            if (cacheVersion === document.version) {
                return cacheDoc;
            }
        }
        const doc = pugLs.parsePugDocument(document.getText());
        pugDocuments.set(document, [document.version, doc]);
        return doc;
    }
};
//# sourceMappingURL=index.js.map