var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ruleWorker = exports.languageFeatureWorker = exports.documentFeatureWorker = void 0;
const definePlugin_1 = require("./definePlugin");
const shared = require("@volar/shared");
function documentFeatureWorker(context, uri, isValidSourceMap, worker, transform, combineResult) {
    return __awaiter(this, void 0, void 0, function* () {
        return languageFeatureWorker(context, uri, undefined, (_, map, file) => {
            if (isValidSourceMap(file, map)) {
                return [undefined];
            }
            return [];
        }, worker, transform, combineResult);
    });
}
exports.documentFeatureWorker = documentFeatureWorker;
function languageFeatureWorker(context, uri, arg, transformArg, worker, transform, combineResult, reportProgress) {
    var _a;
    return __awaiter(this, void 0, void 0, function* () {
        const document = context.getTextDocument(uri);
        const virtualFile = (_a = context.documents.getSourceByUri(uri)) === null || _a === void 0 ? void 0 : _a.root;
        let results = [];
        if (virtualFile) {
            yield (0, definePlugin_1.visitEmbedded)(context.documents, virtualFile, (file, map) => __awaiter(this, void 0, void 0, function* () {
                for (const mappedArg of transformArg(arg, map, file)) {
                    for (const plugin of Object.values(context.plugins)) {
                        const embeddedResult = yield worker(plugin, map.virtualFileDocument, mappedArg, map, file);
                        if (!embeddedResult)
                            continue;
                        const result = transform(embeddedResult, map);
                        if (!result)
                            continue;
                        results.push(result);
                        if (!combineResult)
                            return false;
                        const isEmptyArray = Array.isArray(result) && result.length === 0;
                        if (reportProgress && !isEmptyArray) {
                            reportProgress(combineResult(results));
                        }
                    }
                }
                return true;
            }));
        }
        else if (document) {
            for (const plugin of Object.values(context.plugins)) {
                const embeddedResult = yield worker(plugin, document, arg, undefined, undefined);
                if (!embeddedResult)
                    continue;
                const result = transform(embeddedResult, undefined);
                if (!result)
                    continue;
                results.push(result);
                if (!combineResult)
                    break;
                const isEmptyArray = Array.isArray(result) && result.length === 0;
                if (reportProgress && !isEmptyArray) {
                    reportProgress(combineResult(results));
                }
            }
        }
        if (combineResult && results.length > 0) {
            return combineResult(results);
        }
        else if (results.length > 0) {
            return results[0];
        }
    });
}
exports.languageFeatureWorker = languageFeatureWorker;
function ruleWorker(context, api, uri, isValidSourceMap, worker, transform, combineResult, reportProgress) {
    var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k;
    return __awaiter(this, void 0, void 0, function* () {
        const document = context.getTextDocument(uri);
        const virtualFile = (_a = context.documents.getSourceByUri(uri)) === null || _a === void 0 ? void 0 : _a.root;
        let results = [];
        if (virtualFile) {
            yield (0, definePlugin_1.visitEmbedded)(context.documents, virtualFile, (file, map) => __awaiter(this, void 0, void 0, function* () {
                var _l, _m, _o, _p, _q, _r, _s, _t, _u;
                if (!isValidSourceMap(file)) {
                    return true;
                }
                let ruleCtx = {
                    // project context
                    modules: { typescript: (_l = context.typescript) === null || _l === void 0 ? void 0 : _l.module },
                    uriToFileName: shared.uriToFileName,
                    fileNameToUri: shared.fileNameToUri,
                    rootUri: context.env.rootUri,
                    locale: context.env.locale,
                    getConfiguration: (_m = context.env.configurationHost) === null || _m === void 0 ? void 0 : _m.getConfiguration,
                    onDidChangeConfiguration: (_o = context.env.configurationHost) === null || _o === void 0 ? void 0 : _o.onDidChangeConfiguration,
                    settings: (_q = (_p = context.config.lint) === null || _p === void 0 ? void 0 : _p.settings) !== null && _q !== void 0 ? _q : {},
                    // document context
                    ruleId: '',
                    document: map.virtualFileDocument,
                    report: () => { },
                };
                for (const plugin of Object.values(context.plugins)) {
                    const fn = (_r = plugin.rules) === null || _r === void 0 ? void 0 : _r[api];
                    if (fn) {
                        ruleCtx = yield fn(ruleCtx);
                    }
                    else if ((_s = plugin.rules) === null || _s === void 0 ? void 0 : _s.onAny) {
                        ruleCtx = yield plugin.rules.onAny(ruleCtx);
                    }
                }
                for (const ruleName in (_t = context.config.lint) === null || _t === void 0 ? void 0 : _t.rules) {
                    const rule = (_u = context.config.lint) === null || _u === void 0 ? void 0 : _u.rules[ruleName];
                    if (!rule) {
                        continue;
                    }
                    ruleCtx.ruleId = ruleName;
                    const embeddedResult = yield worker(ruleName, rule, ruleCtx);
                    if (!embeddedResult)
                        continue;
                    const result = transform(embeddedResult, map);
                    if (!result)
                        continue;
                    results.push(result);
                    if (!combineResult)
                        return false;
                    const isEmptyArray = Array.isArray(result) && result.length === 0;
                    if (reportProgress && !isEmptyArray) {
                        reportProgress(combineResult(results));
                    }
                }
                return true;
            }));
        }
        else if (document) {
            let ruleCtx = {
                // project context
                modules: { typescript: (_b = context.typescript) === null || _b === void 0 ? void 0 : _b.module },
                uriToFileName: shared.uriToFileName,
                fileNameToUri: shared.fileNameToUri,
                rootUri: context.env.rootUri,
                locale: context.env.locale,
                getConfiguration: (_c = context.env.configurationHost) === null || _c === void 0 ? void 0 : _c.getConfiguration,
                onDidChangeConfiguration: (_d = context.env.configurationHost) === null || _d === void 0 ? void 0 : _d.onDidChangeConfiguration,
                settings: (_f = (_e = context.config.lint) === null || _e === void 0 ? void 0 : _e.settings) !== null && _f !== void 0 ? _f : {},
                // document context
                ruleId: '',
                document,
                report: () => { },
            };
            for (const plugin of Object.values(context.plugins)) {
                const fn = (_g = plugin.rules) === null || _g === void 0 ? void 0 : _g[api];
                if (fn) {
                    ruleCtx = yield fn(ruleCtx);
                }
                else if ((_h = plugin.rules) === null || _h === void 0 ? void 0 : _h.onAny) {
                    ruleCtx = yield plugin.rules.onAny(ruleCtx);
                }
            }
            for (const ruleName in (_j = context.config.lint) === null || _j === void 0 ? void 0 : _j.rules) {
                const rule = (_k = context.config.lint) === null || _k === void 0 ? void 0 : _k.rules[ruleName];
                if (!rule) {
                    continue;
                }
                ruleCtx.ruleId = ruleName;
                const embeddedResult = yield worker(ruleName, rule, ruleCtx);
                if (!embeddedResult)
                    continue;
                const result = transform(embeddedResult, undefined);
                if (!result)
                    continue;
                results.push(result);
                if (!combineResult)
                    break;
                const isEmptyArray = Array.isArray(result) && result.length === 0;
                if (reportProgress && !isEmptyArray) {
                    reportProgress(combineResult(results));
                }
            }
        }
        if (combineResult && results.length > 0) {
            return combineResult(results);
        }
        else if (results.length > 0) {
            return results[0];
        }
    });
}
exports.ruleWorker = ruleWorker;
//# sourceMappingURL=featureWorkers.js.map