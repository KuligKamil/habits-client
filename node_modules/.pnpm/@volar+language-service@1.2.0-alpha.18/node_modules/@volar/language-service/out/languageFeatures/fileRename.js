var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.register = void 0;
const rename_1 = require("./rename");
const dedupe = require("../utils/dedupe");
const language_core_1 = require("@volar/language-core");
function register(context) {
    return (oldUri, newUri) => __awaiter(this, void 0, void 0, function* () {
        var _a;
        const rootFile = (_a = context.documents.getSourceByUri(oldUri)) === null || _a === void 0 ? void 0 : _a.root;
        if (rootFile) {
            let tsExt;
            (0, language_core_1.forEachEmbeddedFile)(rootFile, embedded => {
                if (embedded.kind === language_core_1.FileKind.TypeScriptHostFile && embedded.fileName.replace(rootFile.fileName, '').match(/^\.(js|ts)x?$/)) {
                    tsExt = embedded.fileName.substring(embedded.fileName.lastIndexOf('.'));
                }
            });
            if (!tsExt) {
                return;
            }
            oldUri += tsExt;
            newUri += tsExt;
        }
        for (const plugin of Object.values(context.plugins)) {
            if (!plugin.doFileRename)
                continue;
            const workspaceEdit = yield plugin.doFileRename(oldUri, newUri);
            if (workspaceEdit) {
                const result = (0, rename_1.embeddedEditToSourceEdit)(workspaceEdit, context.documents, 'fileName');
                if (result === null || result === void 0 ? void 0 : result.documentChanges) {
                    result.documentChanges = dedupe.withDocumentChanges(result.documentChanges);
                }
                return result;
            }
        }
    });
}
exports.register = register;
//# sourceMappingURL=fileRename.js.map