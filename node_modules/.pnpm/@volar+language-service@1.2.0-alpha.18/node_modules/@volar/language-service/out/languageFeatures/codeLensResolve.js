var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.register = exports.showReferencesCommand = void 0;
const references = require("./references");
exports.showReferencesCommand = `volar.${Math.random().toString(36).slice(2)}.show-references`;
function register(context) {
    const findReferences = references.register(context);
    return (item) => __awaiter(this, void 0, void 0, function* () {
        var _a, _b, _c;
        const data = item.data;
        if ((data === null || data === void 0 ? void 0 : data.kind) === 'normal') {
            const plugin = context.plugins[data.pluginId];
            if (!((_a = plugin.codeLens) === null || _a === void 0 ? void 0 : _a.resolve))
                return item;
            Object.assign(item, data.original);
            item = yield plugin.codeLens.resolve(item);
            // item.range already transformed in codeLens request
        }
        if ((data === null || data === void 0 ? void 0 : data.kind) === 'references') {
            let references = (_b = yield findReferences(data.uri, item.range.start)) !== null && _b !== void 0 ? _b : [];
            const plugin = context.plugins[data.pluginId];
            const document = context.getTextDocument(data.uri);
            if (document && ((_c = plugin.referencesCodeLens) === null || _c === void 0 ? void 0 : _c.resolve)) {
                references = yield plugin.referencesCodeLens.resolve(document, data.location, references);
            }
            item.command = {
                title: references.length === 1 ? '1 reference' : `${references.length} references`,
                command: exports.showReferencesCommand,
                arguments: [data.uri, data.location.range.start, references],
            };
        }
        return item;
    });
}
exports.register = register;
//# sourceMappingURL=codeLensResolve.js.map