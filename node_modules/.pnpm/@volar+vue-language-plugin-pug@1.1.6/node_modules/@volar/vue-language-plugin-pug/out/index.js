const pug = require("@volar-plugins/pug/out/languageService");
const source_map_1 = require("@volar/source-map");
const plugin = ({ modules }) => {
    return {
        name: require('../package.json').name,
        version: 1,
        compileSFCTemplate(lang, template, options) {
            if (lang === 'pug') {
                const pugFile = pug === null || pug === void 0 ? void 0 : pug.baseParse(template);
                const map = new source_map_1.SourceMap(pugFile.mappings);
                if (pugFile) {
                    const compiler = modules['@vue/compiler-dom'];
                    const completed = compiler.compile(pugFile.htmlCode, Object.assign(Object.assign({}, options), { onWarn(warning) {
                            var _a;
                            (_a = options === null || options === void 0 ? void 0 : options.onWarn) === null || _a === void 0 ? void 0 : _a.call(options, createProxyObject(warning));
                        },
                        onError(error) {
                            var _a;
                            (_a = options === null || options === void 0 ? void 0 : options.onError) === null || _a === void 0 ? void 0 : _a.call(options, createProxyObject(error));
                        } }));
                    return createProxyObject(completed);
                    function createProxyObject(target) {
                        return new Proxy(target, {
                            get(target, prop) {
                                if (prop === 'offset') {
                                    const htmlOffset = target.offset;
                                    for (const mapped of map.toSourceOffsets(htmlOffset)) {
                                        return mapped[0];
                                    }
                                    return -1;
                                }
                                const value = target[prop];
                                if (typeof value === 'object') {
                                    return createProxyObject(target[prop]);
                                }
                                return value;
                            }
                        });
                    }
                }
            }
        },
    };
};
module.exports = plugin;
//# sourceMappingURL=index.js.map