var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.register = void 0;
const transformer = require("../transformer");
function register(context) {
    return (item) => __awaiter(this, void 0, void 0, function* () {
        var _a;
        const data = item.data;
        if (data) {
            const plugin = context.plugins[data.pluginId];
            if (!((_a = plugin.complete) === null || _a === void 0 ? void 0 : _a.resolve))
                return item;
            item = Object.assign(item, data.original);
            if (data.map) {
                for (const [_, map] of context.documents.getMapsByVirtualFileUri(data.map.embeddedDocumentUri)) {
                    item = yield plugin.complete.resolve(item);
                    item = transformer.asCompletionItem(item, embeddedRange => {
                        var _a;
                        let range = (_a = plugin.resolveEmbeddedRange) === null || _a === void 0 ? void 0 : _a.call(plugin, embeddedRange);
                        if (range)
                            return range;
                        return map.toSourceRange(embeddedRange);
                    }, map.virtualFileDocument);
                }
            }
            else {
                item = yield plugin.complete.resolve(item);
            }
        }
        // TODO: monkey fix import ts file icon
        if (item.detail !== item.detail + '.ts') {
            item.detail = item.detail;
        }
        return item;
    });
}
exports.register = register;
//# sourceMappingURL=completeResolve.js.map